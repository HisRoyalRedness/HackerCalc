
$namespace=HisRoyalRedness.com

using System.IO;

COMPILER HackerCalc

/*-------------------------------------------------------------------------*/

IGNORECASE

CHARACTERS
	letter              = "abcdefghijklmnopqrstuvwxyz_".
	digit               = "0123456789".
	cr                  = '\r'.
	lf                  = '\n'.
	tab                 = '\t'.
	stringCh            = ANY - '"' - '\\' - cr - lf.
	charCh              = ANY - '\'' - '\\' - cr - lf.
	hex                 = "0123456789abcdef".
    zero_to_one         = "01".
    zero_to_two         = "012".
    zero_to_three       = "0123".
    zero_to_five        = "012345".


    /* Ordered from tightest to loosest binding order */
    logNotOp            = '!'.
    bitNotOp            = '~'.
    multOp              = '*'.
    divideOp            = "/\\".
    moduloOp            = '%'.
    addOp               = '+'.
    subOp               = '-'.
    shiftLeftOp         = '<'.
    shiftRightOp        = '>'.
    andOp               = '&'.
    orOp                = '|'.
    xorOp               = '^'.
    openBrac            = '('.
    closeBrac           = ')'.
    underscore          = '_'.
    
    /* datatype modifiers */
    signed_int          = 'i'.
    unsigned_int        = 'u'.
    flt_type            = 'f'.
    binary_type         = 'b'.

TOKENS

    i4                  = "i4".
    i8                  = "i8".
    i16                 = "i16".
    i32                 = "i32".
    i64                 = "i64".
    i128                = "i128".

    u4                  = "u4".
    u8                  = "u8".
    u16                 = "u16".
    u32                 = "u32".
    u64                 = "u64".
    u128                = "u128".

    /* Limited integers: These are integers limited to a particular bitwidth */
    /* Sign flags and bitwidth are added with CONTEXT to ensure that we parse them with no whitespace between the number, sign flag and bit width */
    bin_limited_int     = binary_type zero_to_one { zero_to_one } CONTEXT ( "i4" | "i8" | "i16" | "i32" | "i64" | "i128" | "u4" | "u8" | "u16" | "u32" | "u64" | "u128" ).
    dec_limited_int     = digit { digit } CONTEXT ( "i4" | "i8" | "i16" | "i32" | "i64" | "i128" | "u4" | "u8" | "u16" | "u32" | "u64" | "u128" ).
    hex_limited_int     = "0x" hex { hex } CONTEXT ( "i4" | "i8" | "i16" | "i32" | "i64" | "i128" | "u4" | "u8" | "u16" | "u32" | "u64" | "u128" ).
    integer_type        = signed_int | unsigned_int. // 'i' or 'u'

    /* Unlimited integers: Not bound be any limits  */
    bin_unlimited_int   = binary_type zero_to_one { zero_to_one }.
    dec_unlimited_int   = digit { digit }.
    hex_unlimited_int   = "0x" hex { hex }.

    true_float          = {digit} '.' digit {digit}.
    typed_float         = digit { digit } CONTEXT ( flt_type ).
    float_type          = flt_type.

    typed_ts_seconds    = ( digit { digit } | {digit} '.' digit {digit} ) CONTEXT ( "ts" ).
    timespan_type       = "ts".
    time_type           = "tt".
    date_type           = "dt".

    ts_seconds_type     = "s" | "se" | "sec" | "secs" | "seco" | "secon" | "second" | "seconds".
    ts_minutes_type     = "m" | "mi" | "min" | "mins" | "minu" | "minut" | "minute" | "minutes".
    ts_hours_type       = "h" | "ho" | "hou" | "hour" | "hours" | "hr" | "hrs".
    ts_days_type        = "d" | "da" | "day" | "days".

    date                = digit digit [ digit digit ] '-' ( '0' digit | '1' zero_to_two ) '-' ( zero_to_two digit | '3' zero_to_one ).
    date_rev            = ( zero_to_two digit | '3' zero_to_one ) '-' ( '0' digit | '1' zero_to_two ) '-' digit digit digit digit.

    time                =   ( [ zero_to_one ] digit | '2' zero_to_three ) ':' zero_to_five digit
                          | ( [ zero_to_one ] digit | '2' zero_to_three ) ':' zero_to_five digit ':' zero_to_five digit.

    now                 = "NOW".

    ident               = underscore letter { letter | digit | underscore }.
    sqroot_func         = "sqrt".

    notToken            = logNotOp | bitNotOp. // '-' if also considered a notToken, but we need a bit of complexity in the scanner to differentiate it from subOp (minus)
    multToken           = multOp | divideOp | moduloOp.
    exponentToken       = multOp multOp | divideOp divideOp.
    addToken            = addOp.
    subToken            = subOp.
    shiftToken          = shiftLeftOp shiftLeftOp | shiftRightOp shiftRightOp.
    bitToken            = andOp | orOp | xorOp.
    // A pseudo-token. We use this to differentiate between a subOp (minus) and a notToken (negation), i.e. 1-3 vs -(1+2)
    //negToken            = "-".

    unlimited_cast      = openBrac signed_int closeBrac.
    signed_cast         = openBrac ( "i4" | "i8" | "i16" | "i32" | "i64" | "i128" ) closeBrac.
    unsigned_cast       = openBrac ( "u4" | "u8" | "u16" | "u32" | "u64" | "u128" ) closeBrac.
    float_cast          = openBrac ( "f" | "fl" | "flt" | "float" ) closeBrac.
    timespan_cast       = openBrac ( "ts" | "timespan" ) closeBrac.
    time_cast           = openBrac ( "t" | "ti" | "time" ) closeBrac.
    date_cast           = openBrac ( "d" | "dt" | "date" ) closeBrac.

    openBracket         = openBrac.
    closeBracket        = closeBrac.

IGNORE cr + lf + tab

/*-------------------------------------------------------------------------*/

PRODUCTIONS

HackerCalc                                                      (. IToken token = null; .)
= Expr<out token>                                               (. RootToken = token; .)
.

Expr<out IToken token>                                          
=                   BitExpr<out token>
.

BitExpr<out IToken token>                                       (. IToken tk = null; OperatorToken op = null; .)
=                   ShiftExpr<out tk>
                    {
                        bitToken                                (. if (op == null) { op = OperatorToken.Parse(t.val).Tap(o => o.Left = tk).Tap(o => AddToken(o)); } .)
                                                                (. else { op = OperatorToken.Parse(t.val).Tap(o => o.Left = op); } .)
                        ShiftExpr<out tk>                       (. op.Right = tk; .)
                    }                                           (. token = (IToken)op ?? (IToken)tk; .)
.

ShiftExpr<out IToken token>                                     (. IToken tk = null; OperatorToken op = null; .)
=                   AddExpr<out tk>
                    {
                        shiftToken                              (. if (op == null) { op = OperatorToken.Parse(t.val).Tap(o => o.Left = tk).Tap(o => AddToken(o)); } .)
                                                                (. else { op = OperatorToken.Parse(t.val).Tap(o => o.Left = op); } .)
                        AddExpr<out tk>                         (. op.Right = tk; .)
                    }                                           (. token = (IToken)op ?? (IToken)tk; .)
.

AddExpr<out IToken token>                                       (. IToken tk = null; OperatorToken op = null; .)
=                   MulExpr<out tk>
                    {
                        ( addToken | subToken )                 (. if (op == null) { op = OperatorToken.Parse(t.val).Tap(o => o.Left = tk).Tap(o => AddToken(o)); } .)
                                                                (. else { op = OperatorToken.Parse(t.val).Tap(o => o.Left = op).Tap(o => AddToken(o)); } .)
                        MulExpr<out tk>                         (. op.Right = tk; .)
                    }                                           (. token = (IToken)op ?? (IToken)tk; .)
.

MulExpr<out IToken token>                                       (. IToken tk = null; OperatorToken op = null; .)
=                   ExponentExpr<out tk>
                    {
                        multToken                               (. if (op == null) { op = OperatorToken.Parse(t.val).Tap(o => o.Left = tk).Tap(o => AddToken(o)); } .)
                                                                (. else { op = OperatorToken.Parse(t.val).Tap(o => o.Left = op); } .)
                        ExponentExpr<out tk>                    (. op.Right = tk; .)
                    }                                           (. token = (IToken)op ?? (IToken)tk; .)
.

ExponentExpr<out IToken token>                                  (. IToken tk = null; OperatorToken op = null; .)
=                   NotExpr<out tk>
                    {
                        exponentToken                           (. if (op == null) { op = OperatorToken.Parse(t.val).Tap(o => o.Left = tk).Tap(o => AddToken(o)); } .)
                                                                (. else { op = OperatorToken.Parse(t.val).Tap(o => o.Left = op); } .)
                        NotExpr<out tk>                         (. op.Right = tk; .)
                    }                                           (. token = (IToken)op ?? (IToken)tk; .)
.

NotExpr<out IToken token>                                       (. IToken tk = null; OperatorToken op = null; .)
=                   [
                        notToken                                (. op = OperatorToken.ParseNegate(t.val).Tap(o => AddToken(o)); .)
                    ]
                    Cast<out tk>                                (. token = op == null ? tk : op.Tap(o => o.Left = tk); .)
.

Cast<out IToken token>                                          (. IToken tk = null; OperatorToken op = null; .)
=                   [ 
                          unlimited_cast                        (. op = CastOperatorToken.UnlimitedIntegerCast(); .)
                        | signed_cast                           (. op = CastOperatorToken.LimitedIntegerCast(LimitedIntegerToken.ParseBitWidth(t.val), true); .)
                        | unsigned_cast                         (. op = CastOperatorToken.LimitedIntegerCast(LimitedIntegerToken.ParseBitWidth(t.val), false); .)
                        | float_cast                            (. op = CastOperatorToken.FloatCast(); .)
                        | timespan_cast                         (. op = CastOperatorToken.TimespanCast(); .)
                        | time_cast                             (. op = CastOperatorToken.TimeCast(); .)
                        | date_cast                             (. op = CastOperatorToken.DateCast(); .)
                    ]
                    //Func<out tk>                                (. token = op == null ? tk : op.Tap(o => o.Left = tk); .)
                    Term<out tk>                                (. token = op == null ? tk : op.Tap(o => o.Left = tk); .)
.

//Func<out IToken token>                                          (. token = null; .)
//=                   
//                    ident
//                    openBracket
//                    Expr<out token>
//                    closeBracket
//                    |
//                    Term<out token>
//.

Term<out IToken token>                                          (. token = null; .)
=
                    IF(IsPartialEquation())
                    (
                        EOF
                    )
                    | IF(IsBracket()) 
                        Bracket<out token>
                    | IF(IsTimespanNumber()) 
                        Timespan<out token>
                    | IF(IsDateTime())
                        DateTime<out token>
                    | Date<out token>
                    | Time<out token>
                    | Numeric<out token>
                    | Now<out token>
.

Bracket<out IToken token>                                       (. IToken tk = null; OperatorToken op = null; .)
=
                    [ 
                        subToken                                (. op = OperatorToken.ParseNegate(t.val).Tap(o => AddToken(o)); .)
                    ]
                    openBracket                                 (. AddToken(GroupingToken.Parse(t.val)); .)
                    Expr<out tk>                                (. token = op == null ? tk : op.Tap(o => o.Left = tk); .)
                    closeBracket                                (. AddToken(GroupingToken.Parse(t.val)); .)
.

DateTime<out IToken token>                                      (. token = null; .)
=                                                               (. DateToken dt = null; .)
                    (
                        date                                    (. dt = DateToken.Parse(t.val); .)
                        |
                        date_rev                                (. dt = DateToken.Parse(t.val, true); .)
                    )
                    time                                        (. token = (dt + TimeToken.Parse(t.val)).Tap(o => AddToken(o)); .)
.

Date<out IToken token>                                          (. token = null; .)
=
                    date                                        (. token = DateToken.Parse(t.val).Tap(o => AddToken(o)); .)
                    | date_rev                                  (. token = DateToken.Parse(t.val, true).Tap(o => AddToken(o)); .)
.

Time<out IToken token>                                          (. token = null; .)
=
                    time                                        (. token = TimeToken.Parse(t.val).Tap(o => AddToken(o)); .)
.

Numeric<out IToken token>                                       (. token = null; bool isNeg = false; .)
=                                                               
                    [ 
                        subToken                                (. isNeg = true; .)
                    ]
                    (
                        Float<out token, ref isNeg>
                        |
                        Integer<out token, ref isNeg> 
                    )
.

Integer<out IToken token, ref bool isNeg>                       (. token = null; .)
=
                    (
                        UnlimitedInteger<out token, ref isNeg>
                        |
                        LimitedInteger<out token, ref isNeg>
                    )
.

Float<out IToken token, ref bool isNeg>
=                   ( true_float | typed_float )                (. token = FloatToken.Parse(t.val, isNeg).Tap(o => AddToken(o)); .)
                    [
                        float_type
                    ]
.

Now<out IToken token>
=                   now                                         (. token = new DateToken().Tap(o => AddToken(o)); .)
.

Timespan<out IToken token>                                      (. TimespanToken tk = null; .)
=
                    CompoundTimespanPortion<out tk>             (. token = tk; .)
.

UnlimitedInteger<out IToken token, ref bool isNeg>
=                                                               (. var intBase = IntegerBase.Decimal; .)
                    (
                        dec_unlimited_int
                        |
                        hex_unlimited_int                       (. intBase = IntegerBase.Hexadecimal; .)
                        |
                        bin_unlimited_int                       (. intBase = IntegerBase.Binary; .)
                    )                                           (. token = UnlimitedIntegerToken.Parse(t.val, intBase, isNeg).Tap(o => AddToken(o)); .)
.

LimitedInteger<out IToken token, ref bool isNeg>
=                                                               (. var intBase = IntegerBase.Decimal; .)
                    (
                        dec_limited_int
                        |
                        hex_limited_int                         (. intBase = IntegerBase.Hexadecimal; .)
                        |
                        bin_limited_int                         (. intBase = IntegerBase.Binary; .)
                    )                                           (. var intVal = t.val; var isSigned = true; var bitWidth = ""; .)
                    (
                        ( i4 | i8 | i16 | i32 | i64 | i128 )    (. bitWidth = t.val.Substring(1); .)
                        |
                        ( u4 | u8 | u16 | u32 | u64 | u128 )    (. isSigned = false; bitWidth = t.val.Substring(1); .)
                    )                                           (. token = LimitedIntegerToken.Parse(intVal, intBase, bitWidth, isSigned, isNeg).Tap(o => AddToken(o)); .)
.

CompoundTimespanPortion<out TimespanToken token>                (. token = new TimespanToken(); .)
=                                                               (. TimespanToken tk = null; .)
                    (
                        IF(IsTimespanDays())
                        (
                            TimespanDays<out tk>                (. token = token.AddCompoundPortions(tk); .)
                            [
                                IF(IsTimespanHours())
                                (
                                    TimespanHours<out tk>               (. token = token.AddCompoundPortions(tk); .)
                                    [
                                        IF(IsTimespanMinutes())
                                        (
                                            TimespanMinutes<out tk>     (. token = token.AddCompoundPortions(tk); .)
                                            [
                                                TimespanSeconds<out tk> (. token = token.AddCompoundPortions(tk); .)
                                            ]
                                        )
                                        |
                                        (
                                            TimespanSeconds<out tk>     (. token = token.AddCompoundPortions(tk); .)
                                        )
                                    ]

                                )
                                | IF(IsTimespanMinutes())
                                (
                                    TimespanMinutes<out tk>     (. token = token.AddCompoundPortions(tk); .)
                                    [
                                        TimespanSeconds<out tk> (. token = token.AddCompoundPortions(tk); .)
                                    ]
                                )
                                |
                                (
                                    TimespanSeconds<out tk>     (. token = token.AddCompoundPortions(tk); .)
                                )
                            ]
                        )
                        | IF(IsTimespanHours())
                        (
                            TimespanHours<out tk>               (. token = token.AddCompoundPortions(tk); .)
                            [
                                IF(IsTimespanMinutes())
                                (
                                    TimespanMinutes<out tk>     (. token = token.AddCompoundPortions(tk); .)
                                    [
                                        TimespanSeconds<out tk> (. token = token.AddCompoundPortions(tk); .)
                                    ]
                                )
                                |
                                (
                                    TimespanSeconds<out tk>     (. token = token.AddCompoundPortions(tk); .)
                                )
                            ]
                        )
                        | IF(IsTimespanMinutes())
                        (
                            TimespanMinutes<out tk>             (. token = token.AddCompoundPortions(tk); .)
                            [
                                TimespanSeconds<out tk>         (. token = token.AddCompoundPortions(tk); .)
                            ]
                        )
                        | 
                        (
                            TimespanSeconds<out tk>             (. token = token.AddCompoundPortions(tk); .)
                        )
                    )
                                                                (. if (token != null) AddToken(token); .)
.

TimespanSeconds<out TimespanToken token>                        (. var seconds = ""; .)
=                   (
                        (
                            typed_ts_seconds                    (. seconds = t.val; .)
                            timespan_type
                        )
                        |
                        (
                            true_float                          (. seconds = t.val; .)
                            ts_seconds_type
                        )
                        |
                        (
                            dec_unlimited_int                   (. seconds = t.val; .)
                            ts_seconds_type
                        )
                    )                                           (. token = TimespanToken.Parse(TimeSpan.FromSeconds(double.Parse(seconds))); .)
.

TimespanMinutes<out TimespanToken token>
=                                                               (. token = null; .)
                                                                (. var minutes = ""; .)
                    (
                        (
                            true_float                          (. minutes = t.val; .)
                            ts_minutes_type
                        )
                        |
                        (
                            dec_unlimited_int                   (. minutes = t.val; .)
                            ts_minutes_type
                        )
                    )                                           (. token = TimespanToken.Parse(TimeSpan.FromMinutes(double.Parse(minutes))); .)
.

TimespanHours<out TimespanToken token>
=                                                               (. token = null; .)
                                                                (. var hours = ""; .)
                    (
                        (
                            true_float                          (. hours = t.val; .)
                            ts_hours_type
                        )
                        |
                        (
                            dec_unlimited_int                   (. hours = t.val; .)
                            ts_hours_type
                        )
                    )                                           (. token = TimespanToken.Parse(TimeSpan.FromHours(double.Parse(hours))); .)
.

TimespanDays<out TimespanToken token>
=                                                               (. token = null; .)
                                                                (. var days = ""; .)
                    (
                        (
                            true_float                          (. days = t.val; .)
                            ts_days_type
                        )
                        |
                        (
                            dec_unlimited_int                   (. days = t.val; .)
                            ts_days_type
                        )
                    )                                           (. token = TimespanToken.Parse(TimeSpan.FromDays(double.Parse(days))); .)
.

END HackerCalc.
