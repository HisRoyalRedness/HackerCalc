
$namespace=HisRoyalRedness.com

using System.IO;

COMPILER HackerCalc

/*-------------------------------------------------------------------------*/

IGNORECASE

CHARACTERS
	letter              = "abcdefghijklmnopqrstuvwxyz_".
	digit               = "0123456789".
	cr                  = '\r'.
	lf                  = '\n'.
	tab                 = '\t'.
	stringCh            = ANY - '"' - '\\' - cr - lf.
	charCh              = ANY - '\'' - '\\' - cr - lf.
	hex                 = "0123456789abcdef".
    sen                 = "012345".

    /* Ordered from tightest to loosest binding order */
    logNotOp            = '!'.
    bitNotOp            = '~'.
    multOp              = '*'.
    divideOp            = "/\\".
    moduloOp            = '%'.
    addOp               = '+'.
    subOp               = '-'.
    shiftLeftOp         = '<'.
    shiftRightOp        = '>'.
    andOp               = '&'.
    orOp                = '|'.
    xorOp               = '^'.
    
    /* datatype modifiers */
    signed_int          = 'i'.
    unsigned_int        = 'u'.
    flt_type            = 'f'.
    

TOKENS
    dec_integer         = digit { digit }.
    hex_integer         = ("0x" | "0X" ) hex { hex }.
    
    /* Sign flags and bitwidth are added with CONTEXT to ensure that we parse them with no whitespace between the number, sign flag and bit width */
    signed_dec_integer  = digit { digit } CONTEXT ( ( signed_int | unsigned_int ) ( "4" | "8" | "16" | "32" | "64" | "128" ) ).
    signed_hex_integer  = ("0x" | "0X" ) hex { hex } CONTEXT ( ( signed_int | unsigned_int ) ( "4" | "8" | "16" | "32" | "64" | "128" ) ).
    integer_type        = signed_int | unsigned_int.

    true_float          = {digit} '.' digit {digit}.
    typed_float         = digit { digit } CONTEXT ( flt_type ).
    float_type          = flt_type.

    typed_ts_seconds    = ( digit { digit } | {digit} '.' digit {digit} ) CONTEXT ( "ts" ).
    timespan_type       = "ts".

    typed_time_seconds  = ( digit { digit } | {digit} '.' digit {digit} ) CONTEXT ( "lt" | "ut" ).
    time_type           = "lt" | "ut".


    seconds_type        = "s" | "se" | "sec" | "secs" | "seco" | "secon" | "second" | "seconds".
    minutes_type        = "m" | "mi" | "min" | "mins" | "minu" | "minut" | "minute" | "minutes".
    hours_type          = "h" | "ho" | "hou" | "hour" | "hours" | "hr" | "hrs".
    days_type           = "d" | "da" | "day" | "days".

    /*timespan            = ( digit | sen digit) [ '.' digit { digit } ] time_type
                          | digit { digit } ':' ( digit | sen digit ) [ '.' digit { digit } ] [ time_type ] 
                          | digit { digit } ':' ( digit | sen digit ) ':' ( digit | sen digit ) [ '.' digit { digit } ] [ time_type ]
                          | digit { digit } ':' ( digit | sen digit ) ':' ( digit | sen digit ) ':' ( digit | sen digit ) [ '.' digit { digit } ] [ time_type ].
    timespan_day        = digit { digit } ( days_type | "day" | "days" ).*/
    notToken            = logNotOp | bitNotOp.
    multToken           = multOp | divideOp | moduloOp.
    addToken            = addOp | subOp.
    shiftToken          = shiftLeftOp shiftLeftOp | shiftRightOp shiftRightOp.
    bitToken            = andOp | orOp | xorOp.


IGNORE cr + lf + tab

/*-------------------------------------------------------------------------*/

PRODUCTIONS

HackerCalc
= Expr.

Expr                = BitExpr.

BitExpr
=
                    ShiftExpr
                    {
                        bitToken                                (. AddBitOperator(t.val); .)
                        ShiftExpr
                    }
.

ShiftExpr
=                   AddExpr
                    {
                        shiftToken                              (. AddShiftOperator(t.val); .)
                        AddExpr
                    }
.

AddExpr
=                   MulExpr
                    {
                        addToken                                (. AddAddOperator(t.val); .)
                        MulExpr
                    }
.

MulExpr
=                   NotExpr
                    {
                        multToken                               (. AddMultOperator(t.val); .)
                        NotExpr
                    }
.

NotExpr
=                   [
                        notToken                                (. AddNotOperator(t.val); .)
                    ]
                    Term
.

Term                                                            (. IToken token = null; .)
=
                    (
                        "("                                     (. AddLeftBracket(); .)
                        Expr
                        ")"                                     (. AddRightBracket(); .)
                    )
                    | IF(IsTimespanNumber()) 
                        Timespan<out token>                     (. AddToken(token); .)
                    | Integer<out token>                        (. AddToken(token); .)
                    | Float<out token>                          (. AddToken(token); .)
.


Integer<out IToken token>                                       (. token = null; .)
=
                    (
                        NonSignedInteger<out token>
                        |
                        SignedInteger<out token>
                    )
.

Float<out IToken token>
=                   ( true_float | typed_float )                (. token = FloatToken.Parse(t.val); .)
                    [
                        float_type
                    ]
.

Timespan<out IToken token>                                      (. TimespanToken tk = null; .)
=
                    CompoundTimePortion<out tk>                 (. token = tk; .)
.

NonSignedInteger<out IToken token>
=                                                               (. var isHex = false; .)
                    (
                        dec_integer
                        |
                        hex_integer                             (. isHex = true; .)
                    )                                           (. token = IntegerToken.Parse(t.val, isHex); .)
.

SignedInteger<out IToken token>
=                                                               (. var isHex = false; .)
                    (
                        signed_dec_integer
                        |
                        signed_hex_integer                      (. isHex = true; .)
                    )                                           (. var intVal = t.val; .)
                    integer_type                                (. var isSigned = t.val.ToUpper() == "I"; .)
                    ( "4" | "8" | "16" | "32" | "64" | "128" )  (. var bitWidth = IntegerToken.ParseBitWidth(t.val); .)
                                                                (. token = IntegerToken.Parse(intVal, isHex, isSigned, bitWidth); .)
.

CompoundTimePortion<out TimespanToken token>                    (. token = new TimespanToken(); .)
=                                                               (. TimespanToken tk = null; .)
                    (
                        IF(IsDays())
                        (
                            Days<out tk>                        (. token += tk; .)
                            [
                                IF(IsHours())
                                (
                                    Hours<out tk>               (. token += tk; .)
                                    [
                                        IF(IsMinutes())
                                        (
                                            Minutes<out tk>     (. token += tk; .)
                                            [
                                                Seconds<out tk> (. token += tk; .)
                                            ]
                                        )
                                        |
                                        (
                                            Seconds<out tk>     (. token += tk; .)
                                        )
                                    ]

                                )
                                | IF(IsMinutes())
                                (
                                    Minutes<out tk>             (. token += tk; .)
                                    [
                                        Seconds<out tk>         (. token += tk; .)
                                    ]
                                )
                                |
                                (
                                    Seconds<out tk>             (. token += tk; .)
                                )
                            ]
                        )
                        | IF(IsHours())
                        (
                            Hours<out tk>                       (. token += tk; .)
                            [
                                IF(IsMinutes())
                                (
                                    Minutes<out tk>             (. token += tk; .)
                                    [
                                        Seconds<out tk>         (. token += tk; .)
                                    ]
                                )
                                |
                                (
                                    Seconds<out tk>             (. token += tk; .)
                                )
                            ]
                        )
                        | IF(IsMinutes())
                        (
                            Minutes<out tk>                     (. token += tk; .)
                            [
                                Seconds<out tk>                 (. token += tk; .)
                            ]
                        )
                        | 
                        (
                            Seconds<out tk>                     (. token += tk; .)
                        )
                    )
.

Seconds<out TimespanToken token>                                (. var seconds = ""; .)
=                   (
                        (
                            typed_ts_seconds                    (. seconds = t.val; .)
                            timespan_type
                        )
                        |
                        (
                            true_float                          (. seconds = t.val; .)
                            seconds_type
                        )
                        |
                        (
                            dec_integer                         (. seconds = t.val; .)
                            seconds_type
                        )
                    )                                           (. token = TimespanToken.Parse($"{seconds}sec", TimeSpan.FromSeconds(double.Parse(seconds))); .)
.

Minutes<out TimespanToken token>
=                                                               (. token = null; .)
                                                                (. var minutes = ""; .)
                    (
                        (
                            true_float                          (. minutes = t.val; .)
                            minutes_type
                        )
                        |
                        (
                            dec_integer                         (. minutes = t.val; .)
                            minutes_type
                        )
                    )                                           (. token = TimespanToken.Parse($"{minutes}min", TimeSpan.FromMinutes(double.Parse(minutes))); .)
.

Hours<out TimespanToken token>
=                                                               (. token = null; .)
                                                                (. var hours = ""; .)
                    (
                        (
                            true_float                          (. hours = t.val; .)
                            hours_type
                        )
                        |
                        (
                            dec_integer                         (. hours = t.val; .)
                            hours_type
                        )
                    )                                           (. token = TimespanToken.Parse($"{hours}hrs", TimeSpan.FromHours(double.Parse(hours))); .)
.

Days<out TimespanToken token>
=                                                               (. token = null; .)
                                                                (. var days = ""; .)
                    (
                        (
                            true_float                          (. days = t.val; .)
                            days_type
                        )
                        |
                        (
                            dec_integer                         (. days = t.val; .)
                            days_type
                        )
                    )                                           (. token = TimespanToken.Parse($"{days}days", TimeSpan.FromDays(double.Parse(days))); .)
.

END HackerCalc.
